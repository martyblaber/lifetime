import numpy as npimport life_datadef sort_by_column(a,column_index):    return a[a[:, column_index].argsort()]def KM_sort(life_array):    """    KM Sort Sorts first by time, the first column, then by censor, with events    (censor = 0) being sorted before censors    Args:        life_array (nx2 np array): first column is a list of times. Second is         a list of censors. censor=0 is a fail/death/event    Returns:        sorted life_array (nx2 np array):               """    a = life_array.copy()    a = a[a[:,1].argsort()]    a = a[a[:,0].argsort(kind='mergesort')]    return adef KM_probability(life_array):        n = life_array.shape[0]    p0 = 1./n    p = np.zeros(n)    c = life_array[:,1] #censors        for i in range(n):        if(c[i]==1):            p0+=p0/(n-1-i)        else:            p[i]=p0        return pdata = life_data.example_one()#print(data)data = sort_by_column(data, 0)#print(data)data = life_data.example_one()data = KM_sort(data)#print(data)#print(KM_probability(data))p = KM_probability(data)print(p)print(np.sum(p))